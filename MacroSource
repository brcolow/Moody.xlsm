Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   Generate Surface Plate Maps using the Moody Method.         '
'   Creates HTML canvas images.                                 '
'   Follows T.O. 33K6-4-137-1: Surface Plates;                  '
'   Autocollimator Method, dated 30 October 2005                '
'   Created by and Copyright 2017 Jacob Gilliam                 '
'   Please forgive the rather inelegant code. (;                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'   Set constants that will make use of Excel columns irrelevant _
    in context of Surface Plate Profile Lines
Private Const A = "C"
Private Const B = "D"
Private Const C = "E"
Private Const D = "F"
Private Const E = "G"
Private Const F = "H"
Private Const G = "I"
Private Const H = "J"
'   Set page dimensions based on 8.5x11", with .75" margins
Private Const xInch = 7
Private Const yInch = 9.5
'   Set screen resolution
Private Const DPI = 150
'   Set dimensions of HTML Canvas elements in pixels
Private Const xSize = DPI * xInch
Private Const ySize = DPI * yInch
'   Set the value for half the dimensions. This math would otherwise _
    need to be done many times, so we may as well do it once (DIO)
Private Const xSizeHalf = xSize / 2
Private Const ySizeHalf = ySize / 2
'   Set the default rotation angle from bird's eye view (about Z axis)
Private Const zRot = 15
'   Set X axis rotation angle
Private Const xRot = 45
'   Set value for scaling font based on changes in resolution. Program _
    was originally developed on 90dpi screen, and font size 10 looked _
    best on it.
Private Const fontPt = 10 * DPI / 90

Public Sub ExportHtml()

'   Information about the plate and calibration that we'll _
    want to use later in math and output file headers.
    Dim CustVar As String           '   Customer Name
    Dim PlateVar As String          '   ID#
    Dim PlateSnVar As String        '   Serial No
    Dim PlateMfrVar As String       '   Manufacturer
    Dim PlateWidth As String        '   Width in Inches
    Dim PlateLength As String       '   Length in Inches
    Dim ReferenceLine As String     '   Side of plate with Calibration Sticker. Will Bold.
    Dim FootSize As String          '   Carriage Mirror foot spacing
    Dim BorderSizeX As String       '   Distance of lines D and F from edge ("margin")
    Dim BorderSizeY As String       '   Distance of lines C and E from edge ("margin")
    Dim DiagonalInches As String    '   Length of diagonal line (A or B)
    Dim RunDescript As String       '   Description of this map's measurement, i.e. "Initial," "2nd," or "Final," etc.
    Dim PlateGrade As String        '   "AA," "A," "B," "C," or "Non-Gradeable"
    Dim PlateFlatness As String     '   Integer of highest value minus lowest value, in µ-inches
    Dim CloseG As String            '   Closure error through center line G
    Dim CloseH As String            '   Closure error through center line H
    Dim repeatVar As String         '   Value entered for repeatability check, in µin
    Dim CertNo As String            '   Workorder Number, from Benchtop
    Dim Tech As String              '   Name of technician on certificate
    Dim DateVar As String           '   Date of map generation (Excel's TODAY())
    
    DateVar = Range("P4")
    CertNo = Range("N3")
    Tech = Range("N6")
    CustVar = Range("P5")
    PlateVar = Range("N4")
    PlateSnVar = Range("P9")
    PlateMfrVar = Range("P8")
    PlateWidth = Range("P10")
    PlateLength = Range("P11")
    ReferenceLine = Range("N17")
    FootSize = Range("N16")
    BorderSizeX = Range("N18")
    BorderSizeY = Range("N19")
    DiagonalInches = Range("N20")
    RunDescript = Range("N5")
    PlateGrade = Range("P14")
    PlateFlatness = Range("P15")
    CloseG = Range("P19")
    CloseH = Range("P20")
    repeatVar = Range("P16")

'   VBA doesn't PI().
    Dim Pi As Double
    Pi = 3.14159265358979       '   Originally: 4 * Atn(1)
    
'   Math for 3D representation of vertical lines at points of measurement
    Dim zMax As Integer
    Dim zMin As Integer
    Dim zRange As Integer
    Dim zDiv As Double
    Dim PWid As Integer
    Dim PLen As Integer
    zMax = Range("K2")
    zMin = Range("K1")                      '   Used to set baselines
    zRange = CInt(PlateFlatness)            '   Just need an INT version for math
    zDiv = ySize / (zMax - zMin) / 8        '   Highest point = 1/8th of the page.
    PWid = Range("N14")                     '   Number of measurements across D, F, G
    PLen = Range("N15")                     '   Number of meas across C, E, H

    Dim NameFile As String
'   Decide name of file based on ID# and WO#, and add Run Description _
    if there is one.
    If (RunDescript = "") Then
        NameFile = PlateVar & "_" & CertNo
    Else
        NameFile = PlateVar & "_" & CertNo & _
            "_" & RunDescript
    End If
    
    Dim PWidHalf As Double
    Dim PLenHalf As Double
    PWidHalf = PWid / 2     '   DIO
    PLenHalf = PLen / 2     '   DIO
    
    Dim First As Integer
    First = 4       '   Row number of elevation column headers
    Dim LastDiag As Integer     '   Last row with A & B lines' elevations
    LastDiag = First + Range("N21") + 1      '   Cell N21 never used more than this. No variable needed (NVN).
    Dim LastLen As Integer
    LastLen = First + PLen + 1      '   Last row number for lines C, E, and H elevations
    Dim LastWid As Integer
    LastWid = First + PWid + 1      '   Last row number for lines D, F, and G elevations
    Dim RangeDiag As Integer
    Dim RangeDiagMinOne As Integer
    Dim RangeDiagMultTwo As Integer
    RangeDiag = LastDiag - First
    RangeDiagMinOne = RangeDiag - 1     '   DIO: There are 8 instances of this math
    RangeDiagMultTwo = RangeDiag * 2    '   DIO: There are 12 instances of this math
    Dim RangeWid As Integer
    Dim RangeWidMultTwoMinOne As Integer
    RangeWid = PWid + 1     '   DIO: There are one more elevation points than angle measurments
    RangeWidMultTwoMinOne = RangeWid * 2 - 1    '   DIO
    Dim RangeLen As Integer
    Dim RangeLenMultTwoMinOne As Integer
    RangeLen = PLen + 1     '   DIO
    RangeLenMultTwoMinOne = RangeLen * 2 - 1    '   DIO
    
    
 
On Error GoTo ErrorHandler

'   String arrays used to send XY coordinates to HTML file in format ##.###,##.###
    Dim AArray() As String
    Dim BArray() As String
    Dim CArray() As String
    Dim DArray() As String
    Dim EArray() As String
    Dim FArray() As String
    Dim GArray() As String
    Dim HArray() As String
    Dim NumArray() As String
    Dim NumLen As Integer
       
    ReDim AArray(RangeDiagMultTwo - 1)
    ReDim BArray(RangeDiagMultTwo - 1)
    ReDim CArray(RangeLenMultTwoMinOne)      '   It would either be this or PLen * 2 + 1
    ReDim DArray(RangeWid * 2 - 1)
    ReDim EArray(RangeLenMultTwoMinOne)
    ReDim FArray(RangeWid * 2 - 1)
    ReDim GArray(RangeWid * 2 - 1)
    ReDim HArray(RangeLenMultTwoMinOne)

'   NumArray needs to make X,Y coordinates and share the elevation integer for display.
    NumLen = UBound(AArray, 1) + UBound(BArray, 1) + UBound(CArray, 1) + UBound(DArray, 1) + UBound(EArray, 1) + UBound(FArray, 1) + UBound(GArray, 1) + UBound(HArray, 1)
    ReDim NumArray(NumLen * 3)
    
    Dim i As Integer
    Dim DiagLen As Double
    DiagLen = Sqr((PWid ^ 2) + (PLen ^ 2))      '   DIO: Diagonal of displayed elevation points
    
    Dim angle As Double
    angle = Atn(PLen / PWid)        '   Find angle along which to display elevation points
    
    Dim mult As Double
    mult = xSize / DiagLen      '   Scale to prevent spillover of canvas element. _
                                    NOT TESTED FOR ANGLES OTHER THAN 15DEG ABOUT Z _
                                    AND 45DEG ABOUT X
    
    Dim zRotRadCos As Double
    Dim zRotRadSin As Double
    Dim xRotRadCos As Double
    Dim zRotDiagX As Double
    Dim zRotDiagY As Double
    zRotRadCos = Cos(zRot * Pi / 180)       '   DIO: Matrix math important to rotation about Z
    zRotRadSin = Sin(zRot * Pi / 180)       '   DIO: Matrix math important to rotation about Z
    xRotRadCos = Cos(xRot * Pi / 180)       '   DIO: Matrix math important to rotation about X
    zRotDiagX = Cos(2 * Pi - angle)         '   DIO: Matrix math important to rotation about Z
    zRotDiagY = Sin(2 * Pi - angle)         '   DIO: Matrix math important to rotation about Z

'   Dimensional Values
    Dim x As Double
    Dim y As Double
    Dim z As Double
    
'   Various Counters
    Dim m As Integer
    Dim n As Integer
        m = 0
        n = 0
        
    Dim xPrime As Double
    Dim yPrime As Double
    
'   Line A
    For i = 0 To RangeDiagMultTwo - 1
        x = Round(zRotDiagX * (DiagLen * (RangeDiagMinOne - m) / RangeDiagMinOne), 3)
        y = Round(zRotDiagY * (DiagLen * (RangeDiagMinOne - m) / RangeDiagMinOne), 3)
        z = Range(A & m + First + 1)

        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
'   Use Primes to keep X and Y unchanged until the matrix math is complete
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        AArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        AArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line B
    For i = 0 To RangeDiagMultTwo - 1
        x = Round(zRotDiagX * (DiagLen * (RangeDiagMinOne - m) / RangeDiagMinOne), 3)
        y = (-PLen - Round(zRotDiagY * (DiagLen * (RangeDiagMinOne - m) / RangeDiagMinOne), 3))
        z = (Range(B & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        BArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        BArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line C
    For i = 0 To RangeLenMultTwoMinOne
        x = PWid
        y = -m
        z = (Range(C & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        CArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        CArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line D
    For i = 0 To RangeWidMultTwoMinOne
        x = (PWid - m)
        y = -PLen
        z = (Range(D & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        DArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        DArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line E
    For i = 0 To RangeLenMultTwoMinOne
        x = 0
        y = m - PLen
        z = (Range(E & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        EArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        EArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line F
    For i = 0 To RangeWidMultTwoMinOne
        x = m
        y = 0
        z = (Range(F & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        FArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        FArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line G
    For i = 0 To RangeWidMultTwoMinOne
        x = (PWid - m)
        y = -PLenHalf
        z = (Range(G & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        GArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        GArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
        m = 0
'   Line H
    For i = 0 To (RangeLen) * 2 - 2
        x = PWidHalf
        y = m - PLen
        z = (Range(H & m + First + 1))
        
        NumArray(n) = x - PWidHalf
        NumArray(n + 1) = y + PLenHalf
        NumArray(n + 2) = CInt(z)
        
        xPrime = (x - PWidHalf) * zRotRadCos - (y + PLenHalf) * zRotRadSin
        yPrime = (x - PWidHalf) * zRotRadSin + (y + PLenHalf) * zRotRadCos
        x = xPrime
        y = yPrime
        
        yPrime = y * xRotRadCos
        y = yPrime
        
        HArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf)
        i = i + 1
        HArray(i) = (x * mult) + (xSizeHalf) & "," & (y * mult) + (ySizeHalf) - (z - zMin) * zDiv
        m = m + 1
        n = n + 3
    Next
    
    
    Dim ObjPath As String
    ObjPath = BrowseForFolder()
    
    Dim HtmlFile As Object
    Set HtmlFile = CreateObject("Scripting.FileSystemObject")
    Dim HtmlDo As Object
    ObjPath = ObjPath & "\" & NameFile & ".html"
    Set HtmlDo = HtmlFile.CreateTextFile(ObjPath, True)

HtmlDo.WriteLine ("<!DOCTYPE HTML>")
HtmlDo.WriteLine ("<html>")
HtmlDo.WriteLine ("<head>")
HtmlDo.WriteLine ("<title>" & NameFile & "</title>")
HtmlDo.WriteLine ("</head>")
HtmlDo.WriteLine ("<body>")
HtmlDo.WriteLine ("<canvas id=""sPlate"" width=""" & xSize & """ height=""" & ySize & """ style=""border: 1px #ccc solid;page-break-after:always;"">Surface Plate drawing must be viewed in a modern browser with Canvas compatibility.<br />Please open " & ObjPath & " in Internet Explorer 9 or better, Firefox, Chrome, Safari, or Opera.</canvas>")
HtmlDo.WriteLine ("<canvas id=""sPlateNum"" width=""" & xSize & """ height=""" & ySize & """ style=""border: 1px #ccc solid;"">Surface Plate drawing must be viewed in a modern browser with Canvas compatibility.<br />Please open " & ObjPath & " in Internet Explorer 9 or better, Firefox, Chrome, Safari, or Opera.</canvas>")
HtmlDo.WriteLine ("<script>")
HtmlDo.WriteLine ("var canvas = document.getElementById(""sPlate"");")
HtmlDo.WriteLine ("var context = canvas.getContext(""2d"");")
HtmlDo.WriteLine ("var canvasNum = document.getElementById(""sPlateNum"");")
HtmlDo.WriteLine ("var contextNum = canvasNum.getContext(""2d"");")

HtmlDo.WriteLine ("")
    Dim upperBound As Integer
    upperBound = 0
    For i = 0 To UBound(AArray)
HtmlDo.WriteLine ("context.beginPath();")
        If ReferenceLine = "A" Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & AArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & AArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(AArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If ReferenceLine = "A" Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & AArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & AArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & AArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & AArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(BArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "B") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & BArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & BArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(BArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "B") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & BArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & BArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & BArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & BArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(CArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "C") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & CArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & CArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(CArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "C") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & CArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & CArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & CArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & CArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(DArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "D") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & DArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & DArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(DArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "D") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & DArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & DArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & DArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & DArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(EArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "E") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & EArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & EArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(EArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "E") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & EArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & EArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & EArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & EArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(FArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "F") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & FArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & FArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(FArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "F") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & FArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & FArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & FArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & FArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
        
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(GArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "G") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & GArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & GArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(GArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "G") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & GArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & GArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & GArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & GArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
HtmlDo.WriteLine ("")
    For i = 0 To UBound(HArray)
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "H") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & HArray(i) & ");")
        i = i + 1
HtmlDo.WriteLine ("context.lineTo(" & HArray(i) & ");")
HtmlDo.WriteLine ("context.stroke();")
        If (i < UBound(HArray)) Then
HtmlDo.WriteLine ("context.beginPath();")
        If (ReferenceLine = "H") Then
HtmlDo.WriteLine ("context.lineWidth=3;")
        Else
HtmlDo.WriteLine ("context.lineWidth=1;")
        End If
HtmlDo.WriteLine ("context.moveTo(" & HArray(i) & ");")
HtmlDo.WriteLine ("context.lineTo(" & HArray(i + 2) & ");")
HtmlDo.WriteLine ("context.stroke();")
HtmlDo.WriteLine ("context.moveTo(" & HArray(0) & ");")
HtmlDo.WriteLine ("context.lineTo(" & HArray(i + 1) & ");")
HtmlDo.WriteLine ("context.stroke();")
        End If
        upperBound = upperBound + 1
    Next
    
'HtmlDo.WriteLine ("context.beginPath();")
HtmlDo.WriteLine ("context.font = """ & fontPt & "pt Arial"";")
HtmlDo.WriteLine ("context.fillText(""Customer: " & CustVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 0.25 & ");")
HtmlDo.WriteLine ("context.fillText(""Plate ID: " & PlateVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 0.5 & ");")
HtmlDo.WriteLine ("context.fillText(""Plate SN: " & PlateSnVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 0.75 & ");")
HtmlDo.WriteLine ("context.fillText(""Plate Mfr: " & PlateMfrVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 1 & ");")
HtmlDo.WriteLine ("context.fillText(""Width: " & PlateWidth & """," & 0.06 * xSize & "," & 0.06 * ySize * 1.25 & ");")
HtmlDo.WriteLine ("context.fillText(""Length: " & PlateLength & """," & 0.06 * xSize & "," & 0.06 * ySize * 1.5 & ");")
HtmlDo.WriteLine ("context.fillText(""Center is Zero (0 µin) Elevation.""," & 0.06 * xSize & "," & 0.06 * ySize * 1.75 & ");")
HtmlDo.WriteLine ("context.fillText(""Reference Line (bold): " & ReferenceLine & """," & 0.35 * xSize & "," & 0.06 * ySize * 0.25 & ");")
HtmlDo.WriteLine ("context.fillText(""Foot Size: " & FootSize & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 0.5 & ");")
HtmlDo.WriteLine ("context.fillText(""Border (X): " & BorderSizeX & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 0.75 & ");")
HtmlDo.WriteLine ("context.fillText(""Border (Y): " & BorderSizeY & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 1 & ");")
HtmlDo.WriteLine ("context.fillText(""Diagonal: " & DiagonalInches & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 1.25 & ");")
HtmlDo.WriteLine ("context.fillText(""Run Description: " & RunDescript & """," & 0.65 * xSize & "," & 0.06 * ySize * 0.25 & ");")
HtmlDo.WriteLine ("context.fillText(""Grade: " & PlateGrade & """," & 0.65 * xSize & "," & 0.06 * ySize * 0.5 & ");")
HtmlDo.WriteLine ("context.fillText(""Flatness: " & PlateFlatness & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 0.75 & ");")
HtmlDo.WriteLine ("context.fillText(""Closure G: " & CloseG & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 1 & ");")
HtmlDo.WriteLine ("context.fillText(""Closure H: " & CloseH & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 1.25 & ");")
HtmlDo.WriteLine ("context.fillText(""Repeat: " & repeatVar & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 1.5 & ");")
HtmlDo.WriteLine ("context.fillText(""Certificate: " & CertNo & """," & xSize * 0.06 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("context.fillText(""Technician: " & Tech & """," & xSize * 0.35 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("context.fillText(""Date: " & DateVar & """," & xSize * 0.65 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("context.fillText(""Page 1""," & xSize * 0.9 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("contextNum.font = """ & fontPt & "pt Arial"";")
HtmlDo.WriteLine ("contextNum.fillText(""Customer: " & CustVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 0.25 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Plate ID: " & PlateVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 0.5 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Plate SN: " & PlateSnVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 0.75 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Plate Mfr: " & PlateMfrVar & """," & 0.06 * xSize & "," & 0.06 * ySize * 1 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Width: " & PlateWidth & """," & 0.06 * xSize & "," & 0.06 * ySize * 1.25 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Length: " & PlateLength & """," & 0.06 * xSize & "," & 0.06 * ySize * 1.5 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Reference Line (bold): " & ReferenceLine & """," & 0.35 * xSize & "," & 0.06 * ySize * 0.25 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Foot Size: " & FootSize & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 0.5 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Border (X): " & BorderSizeX & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 0.75 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Border (Y): " & BorderSizeY & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 1 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Diagonal: " & DiagonalInches & " in""," & 0.35 * xSize & "," & 0.06 * ySize * 1.25 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Run Description: " & RunDescript & """," & 0.65 * xSize & "," & 0.06 * ySize * 0.25 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Grade: " & PlateGrade & """," & 0.65 * xSize & "," & 0.06 * ySize * 0.5 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Flatness: " & PlateFlatness & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 0.75 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Closure G: " & CloseG & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 1 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Closure H: " & CloseH & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 1.25 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Repeat: " & repeatVar & " µin""," & 0.65 * xSize & "," & 0.06 * ySize * 1.5 & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Certificate: " & CertNo & """," & xSize * 0.06 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Technician: " & Tech & """," & xSize * 0.35 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Date: " & DateVar & """," & xSize * 0.65 & "," & ySize - (ySize * 0.06 * 0.25) & ");")
HtmlDo.WriteLine ("contextNum.fillText(""Page 2""," & xSize * 0.9 & "," & ySize - (ySize * 0.06 * 0.25) & ");")

HtmlDo.WriteLine ("context.textAlign = ""center"";")
HtmlDo.WriteLine ("contextNum.textAlign = ""center"";")
    Dim o As Integer
    n = 0
    For o = 0 To upperBound - 1
        If NumArray(n + 2) = zMin Or NumArray(n + 2) = zMax Then
HtmlDo.WriteLine ("contextNum.font = ""bold " & fontPt + 4 & "pt Arial"";")
        Else
            Select Case (ReferenceLine)
                Case "C":
                    If o > RangeDiagMultTwo - 1 And o < RangeDiagMultTwo + RangeLen Then
HtmlDo.WriteLine ("contextNum.font = ""bold " & fontPt - 2 & "pt Arial"";")
                    Else
HtmlDo.WriteLine ("contextNum.font = """ & fontPt - 2 & "pt Arial"";")
                    End If
                Case "D":
                    If o > RangeDiagMultTwo + RangeLen - 1 And o < RangeDiagMultTwo + RangeLen + RangeWid Then
HtmlDo.WriteLine ("contextNum.font = ""bold " & fontPt - 2 & "pt Arial"";")
                    Else
HtmlDo.WriteLine ("contextNum.font = """ & fontPt - 2 & "pt Arial"";")
                    End If
                Case "E":
                    If o > RangeDiagMultTwo + RangeLen + RangeWid - 1 And o < RangeDiagMultTwo + RangeLen * 2 + RangeWid Then
HtmlDo.WriteLine ("contextNum.font = ""bold " & fontPt - 2 & "pt Arial"";")
                    Else
HtmlDo.WriteLine ("contextNum.font = """ & fontPt - 2 & "pt Arial"";")
                    End If
                Case "F":
                    If o > RangeDiagMultTwo + RangeLen * 2 + RangeWid - 1 And o < RangeDiagMultTwo + RangeLen * 2 + RangeWid * 2 Then
HtmlDo.WriteLine ("contextNum.font = ""bold " & fontPt - 2 & "pt Arial"";")
                    Else
HtmlDo.WriteLine ("contextNum.font = """ & fontPt - 2 & "pt Arial"";")
                    End If
                Case Default:
HtmlDo.WriteLine ("contextNum.font = """ & fontPt - 2 & "pt Arial"";")
            End Select
        End If
        If NumArray(n) = "0" And NumArray(n + 1) = "0" Then
HtmlDo.WriteLine ("contextNum.fillText(""0""," & NumArray(n) * mult + xSizeHalf & "," & NumArray(n + 1) * mult + ySizeHalf & ");")
        Else
HtmlDo.WriteLine ("contextNum.fillText(""" & NumArray(n + 2) & """," & NumArray(n) * mult + xSizeHalf & "," & NumArray(n + 1) * mult + ySizeHalf & ");")
        End If
        n = n + 3
    Next

HtmlDo.WriteLine ("</script>")
HtmlDo.WriteLine ("</body>")
HtmlDo.WriteLine ("</html>")
        
    
    Set HtmlFile = Nothing
    Set HtmlDo = Nothing
        
    Dim ie As Object
    Set ie = CreateObject("InternetExplorer.application")
    ie.Navigate ObjPath
    ie.Visible = True
    
    Set ie = Nothing
    
Exit Sub

ErrorHandler:

    MsgBox ("Export Terminated:" & vbNewLine & Err.Description)

End Sub

Function BrowseForFolder(Optional OpenAt As Variant) As Variant
     'Function purpose:  To Browser for a user selected folder.
     'If the "OpenAt" path is provided, open the browser at that directory
     'NOTE:  If invalid, it will open at the Desktop level

    Dim ShellApp As Object

     'Create a file browser window at the default folder
    Set ShellApp = CreateObject("Shell.Application"). _
    BrowseForFolder(0, "Please choose a folder" & vbNewLine & "to save your file.", 0, OpenAt)

     'Set the folder to that selected.  (On error in case cancelled)
    On Error Resume Next
    BrowseForFolder = ShellApp.self.Path
    On Error GoTo 0

     'Destroy the Shell Application
    Set ShellApp = Nothing

     'Check for invalid or non-entries and send to the Invalid error
     'handler if found
     'Valid selections can begin L: (where L is a letter) or
     '\\ (as in \\servername\sharename.  All others are invalid
    Select Case Mid(BrowseForFolder, 2, 1)
    Case Is = ":"
        If Left(BrowseForFolder, 1) = ":" Then GoTo Invalid
    Case Is = "\"
        If Not Left(BrowseForFolder, 1) = "\" Then GoTo Invalid
    Case Else
        GoTo Invalid
    End Select

    Exit Function

Invalid:
     'If it was determined that the selection was invalid, set to False
    BrowseForFolder = False
End Function

Private Sub CommandButton1_Click()
    Call ExportHtml
End Sub
