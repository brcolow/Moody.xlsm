'''''''''''''''''''''''''''''''''''''''''''''''''''
'   Copyright (c) 2017 Jacob Eugene Gilliam       '
'                                                 '
'   Do not copy, modify, or sell this software.   '
'   No warranty is provided, express or implied   '
'   by the use of this software.                  '
'''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub ExportDynamicHtml()

On Error GoTo ErrorHandle


'   Information about the plate and calibration that we'll _
    want to use later in math and output file headers.
    Dim CustVar As String           '   Customer Name
    Dim PlateVar As String          '   ID#
    Dim PlateSnVar As String        '   Serial No
    Dim PlateMfrVar As String       '   Manufacturer
    Dim PlateWidth As String        '   Width in Inches
    Dim PlateLength As String       '   Length in Inches
    Dim FootSize As String          '   Carriage Mirror foot spacing
    Dim BorderSizeX As String       '   Distance of lines D and F from edge ("margin")
    Dim BorderSizeY As String       '   Distance of lines C and E from edge ("margin")
    Dim DiagonalInches As String    '   Length of diagonal line (A or B)
    Dim RunDescript As String       '   Description of this map's measurement, i.e. "Initial," "2nd," or "Final," etc.
    Dim PlateGrade As String        '   "AA," "A," "B," "C," or "Non-Gradeable"
    Dim PlateFlatness As String     '   Integer of highest value minus lowest value, in µ-inches
    Dim CloseG As String            '   Closure error through center line G
    Dim CloseH As String            '   Closure error through center line H
    Dim repeatVar As String         '   Value entered for repeatability check, in µin
    Dim CertNo As String            '   Workorder Number, from Benchtop
    Dim Tech As String              '   Name of technician on certificate
    Dim DateVar As String           '   Date of map generation (Excel's TODAY())
    
    DateVar = Worksheets("Setup").Range("F4")
    CertNo = Worksheets("Setup").Range("F5")
    Tech = Worksheets("Setup").Range("D6")
    CustVar = Worksheets("Setup").Range("D4")
    PlateVar = Worksheets("Setup").Range("D5")
    PlateSnVar = Worksheets("Setup").Range("D9")
    PlateMfrVar = Worksheets("Setup").Range("D8")
    PlateWidth = Worksheets("Setup").Range("F8")
    PlateLength = Worksheets("Setup").Range("F9")
    FootSize = Worksheets("Setup").Range("F11")
    BorderSizeX = Worksheets("Setup").Range("D12")
    BorderSizeY = Worksheets("Setup").Range("D13")
    DiagonalInches = Worksheets("Setup").Range("D14")
    RunDescript = Worksheets("Setup").Range("F6")
    PlateGrade = Worksheets("Summary").Range("P3")
    PlateFlatness = Worksheets("Summary").Range("P4")
    CloseG = Worksheets("Summary").Range("P8")
    CloseH = Worksheets("Summary").Range("P9")
    repeatVar = Worksheets("Summary").Range("P5")

' Required values that I'd rather be subject to external control
    Dim DPI As Integer
    Dim pageWidth As Double
    Dim xSize As Double
    Dim pageHeight As Double
    Dim ySize As Double
    Dim ReferenceLine As String     'Side of the plate with Calibration Sticker. Will Bold.
    ReferenceLine = Worksheets("Setup").Range("D11").Value
    If ReferenceLine = "3" Or ReferenceLine = "4" Or ReferenceLine = "5" Or ReferenceLine = "6" Then
        ' Do Nothing
    Else
        MsgBox ("You must enter the reference line (3, 4, 5, or 6)" & vbNewLine & _
            "This is the side of the Plate you will place your Calibration Sticker.")
        Worksheets("Setup").Activate
        Worksheets("Setup").Range("D11").Select
        Exit Sub
    End If
    DPI = 150
    pageWidth = 7.5
    pageHeight = 9
    xSize = DPI * pageWidth
    ySize = DPI * pageHeight
    Dim fontpt As Double
    Dim diagCheck As Integer
    diagCheck = Worksheets("Setup").Range("F14")
    If diagCheck > 30 Then
        fontpt = 4 / diagCheck * DPI
    ElseIf diagCheck < 10 Then
        fontpt = 14
    Else
        fontpt = 3 / diagCheck * DPI
    End If
' Browse for desired folder
Dim ObjPath As String
ObjPath = BrowseForFolder()
If ObjPath = False Then
    MsgBox ("We really need to know where to " & _
        vbNewLine & "store your file.")
    Exit Sub
End If
' Create TXT file, save as HTML
    Dim HtmlFile As Object
    Set HtmlFile = CreateObject("Scripting.FileSystemObject")
    Dim HtmlDo As Object
    Dim NameFile As String
NameFile = InputBox("Filename?")
ObjPath = ObjPath & "\" & NameFile & ".html"
    Set HtmlDo = HtmlFile.CreateTextFile(ObjPath, True)
HtmlDo.WriteLine ("<!DOCTYPE HTML>")
HtmlDo.WriteLine ("<html>")
HtmlDo.WriteLine ("<head>")
HtmlDo.WriteLine ("<title>" & NameFile & "</title>")
HtmlDo.WriteLine ("    <style media=""print"">")
HtmlDo.WriteLine ("        @media print {")
HtmlDo.WriteLine ("            .no-display {")
HtmlDo.WriteLine ("                display: none;")
HtmlDo.WriteLine ("            }")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("    </style>")
HtmlDo.WriteLine ("    <style media=""screen"">")
HtmlDo.WriteLine ("        @media screen {")
HtmlDo.WriteLine ("            .zoom1 {")
HtmlDo.WriteLine ("                transform: scale(0.5,0.5);")
HtmlDo.WriteLine ("                position: absolute;")
HtmlDo.WriteLine ("                left:-250px;")
HtmlDo.WriteLine ("                top:-250px;")
HtmlDo.WriteLine ("            }")
HtmlDo.WriteLine ("            .zoom2 {")
HtmlDo.WriteLine ("                transform: scale(0.5,0.5);")
HtmlDo.WriteLine ("                position: absolute;")
HtmlDo.WriteLine ("                left:300px;")
HtmlDo.WriteLine ("                top:-250px;")
HtmlDo.WriteLine ("            }")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("    </style>")
HtmlDo.WriteLine ("</head>")
HtmlDo.WriteLine ("<body>")
HtmlDo.WriteLine ("    <p class=""no-display"">")
HtmlDo.WriteLine ("        <form name=""zRotForm"" class=""no-display"">")
HtmlDo.WriteLine ("            <input id=""angleIn"" type=""text"" placeholder=""Angle in Degrees (&deg;)"" class=""no-display"" />")
HtmlDo.WriteLine ("            <input type=""button"" id=""angleGo"" value=""Enter Angle"" class=""no-display"" /> Press with no value to add 5&deg; (degrees) to viewing angle.")
HtmlDo.WriteLine ("        </form>")
HtmlDo.WriteLine ("    </p>")
HtmlDo.WriteLine ("    <p class=""no-display"">")
HtmlDo.WriteLine ("    When printing, select the ""Shrink to Fit"" or ""Fit to Page"" option.")
HtmlDo.WriteLine ("    </p>")
HtmlDo.WriteLine ("    <canvas id=""sPlate"" width=""1050"" height=""1425"" style=""border: 1px #ccc solid; page-break-after:always;"" class=""zoom1"">")
HtmlDo.WriteLine ("        <p>Surface Plate drawing must be viewed in a modern browser with Canvas compatibility.<br />Please open " & ObjPath & " in Internet Explorer 9 or better, Firefox, Chrome, Safari, or Opera.</p>")
HtmlDo.WriteLine ("    </canvas>")
HtmlDo.WriteLine ("<canvas id=""sPlateNum"" width=""1050"" height=""1425"" style=""border: 1px #ccc solid;"" class=""zoom2"">Surface Plate drawing must be viewed in a modern browser with Canvas compatibility.<br />Please open " & ObjPath & " in Internet Explorer 9 or better, Firefox, Chrome, Safari, or Opera.</canvas>")
HtmlDo.WriteLine ("<script>")
HtmlDo.WriteLine ("var canvas = document.getElementById(""sPlate"");")
HtmlDo.WriteLine ("var context = canvas.getContext(""2d"");")
HtmlDo.WriteLine ("var canvasNum = document.getElementById(""sPlateNum"");")
HtmlDo.WriteLine ("var contextNum = canvasNum.getContext(""2d"");")
' Line Loop; advances Sheet Number
    For i = 1 To 8
' Get number of angle measurements per sheet and add _
    1 so we have the number of elevation stations.
        o = Sheets("Line " & i).Range("A1").Value
' Create Javascript array with Name Line(#)
HtmlDo.WriteLine ("var Line" & i & " = [")
' Result Loop; advances Row (Measurement Station) Number _
    for j=0 to worksheets("Sheet" & i).
        For j = 0 To o - 1
' Insert Z values in order, up to (not including) the last value
HtmlDo.WriteLine ("        " & CInt(Sheets("Line " & i).Range("K" & j + 8).Value) & ",")
        Next
' Insert last value with proper closer
HtmlDo.WriteLine ("        " & CInt(Sheets("Line " & i).Range("K" & j + 8).Value) & "];")
    Next
HtmlDo.WriteLine ("var zRot = 15;")
HtmlDo.WriteLine ("var xRot = 45;")
Dim minElev As Integer
minElev = Worksheets("Summary").Range("L1")
Dim maxElev As Integer
maxElev = Worksheets("Summary").Range("L2")
HtmlDo.WriteLine ("var minElev = " & minElev & ";")
HtmlDo.WriteLine ("var maxElev = " & maxElev & ";")
HtmlDo.WriteLine ("var flatness = " & maxElev - minElev & ";")
HtmlDo.WriteLine ("var xSize = 1050;")
HtmlDo.WriteLine ("var ySize = 1425;")
HtmlDo.WriteLine ("var pWid = Line4.length - 1;")
HtmlDo.WriteLine ("var pLen = Line3.length - 1;")
HtmlDo.WriteLine ("var pDiag = Line1.length - 1;")
HtmlDo.WriteLine ("var angle = Math.atan(pLen / pWid);")
HtmlDo.WriteLine ("var zDiv = 1350 / (maxElev - minElev) / 8;")
HtmlDo.WriteLine ("var diagLen = Math.sqrt(pWid * pWid + pLen * pLen);")
HtmlDo.WriteLine ("var mult = xSize / diagLen;")
HtmlDo.WriteLine ("var zRotCos, zRotSin, xRotCos;")
HtmlDo.WriteLine ("var zRotDiagX = Math.cos(2 * Math.PI - angle);")
HtmlDo.WriteLine ("var zRotDiagY = Math.sin(2 * Math.PI - angle);")
HtmlDo.WriteLine ("var RefLine = """ & ReferenceLine & """;")
HtmlDo.WriteLine ("var x;")
HtmlDo.WriteLine ("var y;")
HtmlDo.WriteLine ("var xPrime;")
HtmlDo.WriteLine ("var yPrime;")
HtmlDo.WriteLine ("var i;")
HtmlDo.WriteLine ("function drawMap() {")
HtmlDo.WriteLine ("    ""use strict"";")
'HtmlDo.WriteLine ("context.beginPath();")
HtmlDo.WriteLine ("    context.font = ""12pt Arial"";")
HtmlDo.WriteLine ("    context.textAlign = ""left"";")
HtmlDo.WriteLine ("    contextNum.font = ""12pt Arial"";")
HtmlDo.WriteLine ("    contextNum.textAlign = ""left"";")
HtmlDo.WriteLine ("    context.fillText(""Customer: " & CustVar & """, 0.06 * xSize, 0.06 * ySize * 0.25);")
HtmlDo.WriteLine ("    context.fillText(""Plate ID: " & PlateVar & """, 0.06 * xSize, 0.06 * ySize * 0.5);")
HtmlDo.WriteLine ("    context.fillText(""Plate SN: " & PlateSnVar & """, 0.06 * xSize, 0.06 * ySize * 0.75);")
HtmlDo.WriteLine ("    context.fillText(""Plate Mfr: " & PlateMfrVar & """, 0.06 * xSize, 0.06 * ySize * 1);")
HtmlDo.WriteLine ("    context.fillText(""Width: " & PlateWidth & """, 0.06 * xSize, 0.06 * ySize * 1.25);")
HtmlDo.WriteLine ("    context.fillText(""Length: " & PlateLength & """, 0.06 * xSize, 0.06 * ySize * 1.5);")
HtmlDo.WriteLine ("    context.fillText(""Center is Zero (0 µin) Elevation."", 0.06 * xSize, 0.06 * ySize * 1.75);")
HtmlDo.WriteLine ("    context.fillText(""Reference Line (bold): " & ReferenceLine & """, 0.35 * xSize, 0.06 * ySize * 0.25);")
HtmlDo.WriteLine ("    context.fillText(""Foot Size: " & FootSize & " in"", 0.35 * xSize, 0.06 * ySize * 0.5);")
HtmlDo.WriteLine ("    context.fillText(""Border (X): " & BorderSizeX & " in"", 0.35 * xSize, 0.06 * ySize * 0.75);")
HtmlDo.WriteLine ("    context.fillText(""Border (Y): " & BorderSizeY & " in"", 0.35 * xSize, 0.06 * ySize * 1);")
HtmlDo.WriteLine ("    context.fillText(""Diagonal: " & DiagonalInches & " in"", 0.35 * xSize, 0.06 * ySize * 1.25);")
HtmlDo.WriteLine ("    context.fillText(""Run Description: " & RunDescript & """, 0.65 * xSize, 0.06 * ySize * 0.25);")
HtmlDo.WriteLine ("    context.fillText(""Grade: " & PlateGrade & """, 0.65 * xSize, 0.06 * ySize * 0.5);")
HtmlDo.WriteLine ("    context.fillText(""Flatness: " & PlateFlatness & " µin"", 0.65 * xSize, 0.06 * ySize * 0.75);")
HtmlDo.WriteLine ("    context.fillText(""Closure G: " & CloseG & """, 0.65 * xSize, 0.06 * ySize * 1);")
HtmlDo.WriteLine ("    context.fillText(""Closure H: " & CloseH & """, 0.65 * xSize, 0.06 * ySize * 1.25);")
HtmlDo.WriteLine ("    context.fillText(""Repeat: " & repeatVar & """, 0.65 * xSize, 0.06 * ySize * 1.5);")
HtmlDo.WriteLine ("    context.fillText(""Certificate: " & CertNo & """, xSize * 0.06, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    context.fillText(""Technician: " & Tech & """, xSize * 0.35, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    context.fillText(""Date: " & DateVar & """, xSize * 0.65, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    context.fillText(""Page 1"", xSize * 0.9, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    contextNum.fillText(""Customer: " & CustVar & """, 0.06 * xSize, 0.06 * ySize * 0.25);")
HtmlDo.WriteLine ("    contextNum.fillText(""Plate ID: " & PlateVar & """, 0.06 * xSize, 0.06 * ySize * 0.5);")
HtmlDo.WriteLine ("    contextNum.fillText(""Plate SN: " & PlateSnVar & """, 0.06 * xSize, 0.06 * ySize * 0.75);")
HtmlDo.WriteLine ("    contextNum.fillText(""Plate Mfr: " & PlateMfrVar & """, 0.06 * xSize, 0.06 * ySize * 1);")
HtmlDo.WriteLine ("    contextNum.fillText(""Width: " & PlateWidth & """, 0.06 * xSize, 0.06 * ySize * 1.25);")
HtmlDo.WriteLine ("    contextNum.fillText(""Length: " & PlateLength & """, 0.06 * xSize, 0.06 * ySize * 1.5);")
HtmlDo.WriteLine ("    contextNum.fillText(""Center is Zero (0 µin) Elevation."", 0.06 * xSize, 0.06 * ySize * 1.75);")
HtmlDo.WriteLine ("    contextNum.fillText(""Reference Line (bold): " & ReferenceLine & """, 0.35 * xSize, 0.06 * ySize * 0.25);")
HtmlDo.WriteLine ("    contextNum.fillText(""Foot Size: " & FootSize & " in"", 0.35 * xSize, 0.06 * ySize * 0.5);")
HtmlDo.WriteLine ("    contextNum.fillText(""Border (X): " & BorderSizeX & " in"", 0.35 * xSize, 0.06 * ySize * 0.75);")
HtmlDo.WriteLine ("    contextNum.fillText(""Border (Y): " & BorderSizeY & " in"", 0.35 * xSize, 0.06 * ySize * 1);")
HtmlDo.WriteLine ("    contextNum.fillText(""Diagonal: " & DiagonalInches & " in"", 0.35 * xSize, 0.06 * ySize * 1.25);")
HtmlDo.WriteLine ("    contextNum.fillText(""Run Description: " & RunDescript & """, 0.65 * xSize, 0.06 * ySize * 0.25);")
HtmlDo.WriteLine ("    contextNum.fillText(""Grade: " & PlateGrade & """, 0.65 * xSize, 0.06 * ySize * 0.5);")
HtmlDo.WriteLine ("    contextNum.fillText(""Flatness: " & PlateFlatness & " µin"", 0.65 * xSize, 0.06 * ySize * 0.75);")
HtmlDo.WriteLine ("    contextNum.fillText(""Closure G: " & CloseG & """, 0.65 * xSize, 0.06 * ySize * 1);")
HtmlDo.WriteLine ("    contextNum.fillText(""Closure H: " & CloseH & """, 0.65 * xSize, 0.06 * ySize * 1.25);")
HtmlDo.WriteLine ("    contextNum.fillText(""Repeat: " & repeatVar & """, 0.65 * xSize, 0.06 * ySize * 1.5);")
HtmlDo.WriteLine ("    contextNum.fillText(""Certificate: " & CertNo & """, xSize * 0.06, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    contextNum.fillText(""Technician: " & Tech & """, xSize * 0.35, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    contextNum.fillText(""Date: " & DateVar & """, xSize * 0.65, ySize - (ySize * 0.06 * 0.25));")
HtmlDo.WriteLine ("    contextNum.fillText(""Page 2"", xSize * 0.9, ySize - (ySize * 0.06 * 0.25));")
    
HtmlDo.WriteLine ("    zRotCos = Math.cos(zRot * Math.PI / 180);")
HtmlDo.WriteLine ("    zRotSin = Math.sin(zRot * Math.PI / 180);")
HtmlDo.WriteLine ("    xRotCos = Math.cos(xRot * Math.PI / 180);")
HtmlDo.WriteLine ("    var AArray = [];")
HtmlDo.WriteLine ("    var aotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pDiag + 1; i += 1) {")
HtmlDo.WriteLine ("        x = zRotDiagX * (diagLen * (pDiag - i) / pDiag);")
HtmlDo.WriteLine ("        y = zRotDiagY * (diagLen * (pDiag - i) / pDiag);")
HtmlDo.WriteLine ("        context.lineWidth = 1;")
HtmlDo.WriteLine ("        contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        contextNum.textAlign = ""center"";")
HtmlDo.WriteLine ("        if (Line1[i] == maxElev || Line1[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0) {")
HtmlDo.WriteLine ("            contextNum.fillText(Line1[i], (x - (pWid / 2)) * mult + (xSize / 2) + 10, (y + (pLen / 2)) * mult + (ySize / 2)) - 10;")
HtmlDo.WriteLine ("        } else if (i == pDiag) {")
HtmlDo.WriteLine ("            contextNum.fillText(Line1[i], (x - (pWid / 2)) * mult + (xSize / 2) - 10, (y + (pLen / 2)) * mult + (ySize / 2)) + 10;")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            contextNum.fillText(Line1[i], (x - (pWid / 2)) * mult + (xSize / 2), (y + (pLen / 2)) * mult + (ySize / 2));")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        AArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        AArray.push((y * mult) + (ySize / 2) - ((Line1[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        aotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        aotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line1[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < AArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(AArray[i], AArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(AArray[i + 2], AArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(aotLine[i], aotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(aotLine[i + 2], aotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var BArray = [];")
HtmlDo.WriteLine ("    var botLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pDiag + 1; i += 1) {")
HtmlDo.WriteLine ("        x = zRotDiagX * (diagLen * (pDiag - i) / pDiag);")
HtmlDo.WriteLine ("        y = -pLen - (zRotDiagY * (diagLen * (pDiag - i) / pDiag));")
HtmlDo.WriteLine ("        context.lineWidth = 1;")
HtmlDo.WriteLine ("        contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        contextNum.textAlign = ""center"";")
HtmlDo.WriteLine ("        if (Line2[i] == maxElev || Line2[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0) {")
HtmlDo.WriteLine ("            contextNum.fillText(Line2[i], (x - (pWid / 2)) * mult + (xSize / 2) + 10, (y + (pLen / 2)) * mult + (ySize / 2)) + 10;")
HtmlDo.WriteLine ("        } else if (i == pDiag) {")
HtmlDo.WriteLine ("            contextNum.fillText(Line2[i], (x - (pWid / 2)) * mult + (xSize / 2) - 10, (y + (pLen / 2)) * mult + (ySize / 2)) - 10;")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            contextNum.fillText(Line2[i], (x - (pWid / 2)) * mult + (xSize / 2), (y + (pLen / 2)) * mult + (ySize / 2));")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        BArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        BArray.push((y * mult) + (ySize / 2) - ((Line2[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        botLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        botLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line2[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < BArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(BArray[i], BArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(BArray[i + 2], BArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(botLine[i], botLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(botLine[i + 2], botLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var CArray = [];")
HtmlDo.WriteLine ("    var cotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pLen + 1; i += 1) {")
HtmlDo.WriteLine ("        x = pWid;")
HtmlDo.WriteLine ("        y = -i;")
HtmlDo.WriteLine ("        if (RefLine == ""3"") {")
HtmlDo.WriteLine ("            context.lineWidth = 3;")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            context.lineWidth = 1;")
HtmlDo.WriteLine ("            contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (Line3[i] == maxElev || Line3[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0 || i == pLen || i == pLen / 2) {")
HtmlDo.WriteLine ("            // Do not print -- Avoid confusion.")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            contextNum.textAlign = ""left"";")
HtmlDo.WriteLine ("            contextNum.fillText(Line3[i], (x - (pWid / 2)) * mult + (xSize / 2) + 10, (y + (pLen / 2)) * mult + (ySize / 2));")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        CArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        CArray.push((y * mult) + (ySize / 2) - ((Line3[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        cotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        cotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line3[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < CArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(CArray[i], CArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(CArray[i + 2], CArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(cotLine[i], cotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(cotLine[i + 2], cotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var DArray = [];")
HtmlDo.WriteLine ("    var dotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pWid + 1; i += 1) {")
HtmlDo.WriteLine ("        x = pWid - i;")
HtmlDo.WriteLine ("        y = -pLen;")
HtmlDo.WriteLine ("        contextNum.textAlign = ""center"";")
HtmlDo.WriteLine ("        if (RefLine == ""4"") {")
HtmlDo.WriteLine ("            context.lineWidth = 3;")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            context.lineWidth = 1;")
HtmlDo.WriteLine ("            contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (Line4[i] == maxElev || Line4[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0 || i == pWid || i == pWid / 2) {")
HtmlDo.WriteLine ("            // Do not print -- Avoid confusion. ")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            if ((i % 2) > 0) {")
HtmlDo.WriteLine ("                contextNum.textBaseline = ""bottom"";")
HtmlDo.WriteLine ("            } else {")
HtmlDo.WriteLine ("                contextNum.textBaseline = ""top"";")
HtmlDo.WriteLine ("            }")
HtmlDo.WriteLine ("        contextNum.fillText(Line4[i], (x - (pWid / 2)) * mult + (xSize / 2), (y + (pLen / 2)) * mult + (ySize / 2) - 10);")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        DArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        DArray.push((y * mult) + (ySize / 2) - ((Line4[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        dotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        dotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line4[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < DArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(DArray[i], DArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(DArray[i + 2], DArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(dotLine[i], dotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(dotLine[i + 2], dotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var EArray = [];")
HtmlDo.WriteLine ("    var eotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pLen + 1; i += 1) {")
HtmlDo.WriteLine ("        x = 0;")
HtmlDo.WriteLine ("        y = i - pLen;")
HtmlDo.WriteLine ("        if (RefLine == ""5"") {")
HtmlDo.WriteLine ("            context.lineWidth = 3;")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            context.lineWidth = 1;")
HtmlDo.WriteLine ("            contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (Line5[i] == maxElev || Line5[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0 || i == pLen || i == pLen / 2) {")
HtmlDo.WriteLine ("            // Do not print -- Avoid confusion.")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            contextNum.textAlign = ""right"";")
HtmlDo.WriteLine ("            contextNum.fillText(Line5[i], (x - (pWid / 2)) * mult + (xSize / 2) - 10, (y + (pLen / 2)) * mult + (ySize / 2));")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        EArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        EArray.push((y * mult) + (ySize / 2) - ((Line5[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        eotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        eotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line5[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < EArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(EArray[i], EArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(EArray[i + 2], EArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(eotLine[i], eotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(eotLine[i + 2], eotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var FArray = [];")
HtmlDo.WriteLine ("    var fotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pWid + 1; i += 1) {")
HtmlDo.WriteLine ("        x = i;")
HtmlDo.WriteLine ("        y = 0;")
HtmlDo.WriteLine ("        contextNum.textAlign = ""center"";")
HtmlDo.WriteLine ("        if (RefLine == ""6"") {")
HtmlDo.WriteLine ("            context.lineWidth = 3;")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            context.lineWidth = 1;")
HtmlDo.WriteLine ("            contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (Line6[i] == maxElev || Line6[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0 || i == pWid || i == pWid / 2) {")
HtmlDo.WriteLine ("            // Do not print -- Avoid confusion. ")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            if ((i % 2) > 0) {")
HtmlDo.WriteLine ("                contextNum.textBaseline = ""bottom"";")
HtmlDo.WriteLine ("            } else {")
HtmlDo.WriteLine ("                contextNum.textBaseline = ""top"";")
HtmlDo.WriteLine ("            }")
HtmlDo.WriteLine ("        contextNum.fillText(Line6[i], (x - (pWid / 2)) * mult + (xSize / 2), (y + (pLen / 2)) * mult + (ySize / 2) + 10);")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        FArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        FArray.push((y * mult) + (ySize / 2) - ((Line6[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        fotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        fotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line6[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < FArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(FArray[i], FArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(FArray[i + 2], FArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(fotLine[i], fotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(fotLine[i + 2], fotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var GArray = [];")
HtmlDo.WriteLine ("    var gotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pWid + 1; i += 1) {")
HtmlDo.WriteLine ("        x = pWid - i;")
HtmlDo.WriteLine ("        y = -pLen / 2;")
HtmlDo.WriteLine ("        context.lineWidth = 1;")
HtmlDo.WriteLine ("        contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        if (Line7[i] == maxElev || Line7[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (i == 0 || i == pWid) {")
HtmlDo.WriteLine ("            contextNum.textBaseline = ""alphabetic"";")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            if ((i % 2) > 0) {")
HtmlDo.WriteLine ("                contextNum.textBaseline = ""top"";")
HtmlDo.WriteLine ("            } else {")
HtmlDo.WriteLine ("                contextNum.textBaseline = ""bottom"";")
HtmlDo.WriteLine ("            }")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (x == pWid / 2) {")
HtmlDo.WriteLine ("            // Don't print it. It gets ugly.")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            contextNum.fillText(Line7[i], (x - (pWid / 2)) * mult + (xSize / 2), (y + (pLen / 2)) * mult + (ySize / 2));")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        GArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        GArray.push((y * mult) + (ySize / 2) - ((Line7[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        gotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        gotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line7[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < GArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(GArray[i], GArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(GArray[i + 2], GArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(gotLine[i], gotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(gotLine[i + 2], gotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    var HArray = [];")
HtmlDo.WriteLine ("    var hotLine = [];")
HtmlDo.WriteLine ("    for (i = 0; i < pLen + 1; i += 1) {")
HtmlDo.WriteLine ("        x = pWid / 2;")
HtmlDo.WriteLine ("        y = i - pLen;")
HtmlDo.WriteLine ("        context.lineWidth = 1;")
HtmlDo.WriteLine ("        contextNum.font = """ & fontpt & "pt Arial"";")
HtmlDo.WriteLine ("        contextNum.textAlign = ""center"";")
HtmlDo.WriteLine ("        if (Line8[i] == maxElev || Line8[i] == minElev) {")
HtmlDo.WriteLine ("            contextNum.font = ""bold " & fontpt * 1.5 & "pt Arial"";")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        if (y == -pLen / 2) {")
HtmlDo.WriteLine ("            // Don't Print it; It gets confusing.")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            contextNum.fillText(Line8[i], (x - (pWid / 2)) * mult + (xSize / 2), (y + (pLen / 2)) * mult + (ySize / 2));")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        xPrime = (x - pWid / 2) * zRotCos - (y + pLen / 2) * zRotSin;")
HtmlDo.WriteLine ("        yPrime =  (x - pWid / 2) * zRotSin + (y + pLen / 2) * zRotCos;")
HtmlDo.WriteLine ("        x = xPrime;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        yPrime = y * xRotCos;")
HtmlDo.WriteLine ("        y = yPrime;")
HtmlDo.WriteLine ("        HArray.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        HArray.push((y * mult) + (ySize / 2) - ((Line8[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        hotLine.push((x * mult) + (xSize / 2));")
HtmlDo.WriteLine ("        hotLine.push((y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2));")
HtmlDo.WriteLine ("        context.lineTo((x * mult) + (xSize / 2), (y * mult) + (ySize / 2) - ((Line8[i] - minElev) * zDiv));")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("    for (i = 0; i < HArray.length * 2 - 1; i += 2) {")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(HArray[i], HArray[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(HArray[i + 2], HArray[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("        context.beginPath();")
HtmlDo.WriteLine ("        context.moveTo(hotLine[i], hotLine[i + 1]);")
HtmlDo.WriteLine ("        context.lineTo(hotLine[i + 2], hotLine[i + 3]);")
HtmlDo.WriteLine ("        context.stroke();")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("}")
HtmlDo.WriteLine ("function zRotate() {")
HtmlDo.WriteLine ("    var checkAngle = document.getElementById(""angleIn"").value;")
HtmlDo.WriteLine ("    if (isNaN(checkAngle)) {")
HtmlDo.WriteLine ("        window.alert(""Must enter a number."");")
HtmlDo.WriteLine ("    } else {")
HtmlDo.WriteLine ("        if (checkAngle == """") {")
HtmlDo.WriteLine ("            zRot -= 5;")
HtmlDo.WriteLine ("        } else {")
HtmlDo.WriteLine ("            zRot = checkAngle;")
HtmlDo.WriteLine ("        }")
HtmlDo.WriteLine ("        context.clearRect(0, 0, xSize, ySize);")
HtmlDo.WriteLine ("        contextNum.clearRect(0, 0, xSize, ySize);")
HtmlDo.WriteLine ("        drawMap();")
HtmlDo.WriteLine ("        document.getElementById(""angleIn"").value = """";")
HtmlDo.WriteLine ("    }")
HtmlDo.WriteLine ("}")
HtmlDo.WriteLine ("drawMap();")
HtmlDo.WriteLine ("document.getElementById(""angleGo"").addEventListener(""click"", zRotate);")
HtmlDo.WriteLine ("</script>")
HtmlDo.WriteLine ("</body>")
HtmlDo.WriteLine ("</html>")

    Set HtmlFile = Nothing
    Set HtmlDo = Nothing
        
    Dim ie As Object
    Set ie = CreateObject("InternetExplorer.application")
    ie.Navigate ObjPath
On Error Resume Next
    ie.Visible = True
    
    Set ie = Nothing
    
Exit Sub

ErrorHandle:
    MsgBox ("Export Terminated:" & vbNewLine & Err.Description)
    
End Sub

Function BrowseForFolder(Optional OpenAt As Variant) As Variant
     'Function purpose:  To Browser for a user selected folder.
     'If the "OpenAt" path is provided, open the browser at that directory
     'NOTE:  If invalid, it will open at the Desktop level

    Dim ShellApp As Object

     'Create a file browser window at the default folder
    Set ShellApp = CreateObject("Shell.Application"). _
    BrowseForFolder(0, "Please choose a folder" & vbNewLine & "to save your file.", 0, OpenAt)

     'Set the folder to that selected.  (On error in case cancelled)
    On Error Resume Next
    BrowseForFolder = ShellApp.self.Path
    On Error GoTo 0

     'Destroy the Shell Application
    Set ShellApp = Nothing

     'Check for invalid or non-entries and send to the Invalid error
     'handler if found
     'Valid selections can begin L: (where L is a letter) or
     '\\ (as in \\servername\sharename.  All others are invalid
    Select Case Mid(BrowseForFolder, 2, 1)
    Case Is = ":"
        If left(BrowseForFolder, 1) = ":" Then GoTo Invalid
    Case Is = "\"
        If Not left(BrowseForFolder, 1) = "\" Then GoTo Invalid
    Case Else
        GoTo Invalid
    End Select

    Exit Function

Invalid:
     'If it was determined that the selection was invalid, set to False
    BrowseForFolder = False
End Function


